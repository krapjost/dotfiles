snippet statelessW
alias slW
    class ${1:name} extends StatelessWidget {
      const ${1:name}({Key? key}) : super(key: key);
      @override
      Widget build(BuildContext context) {
        return Container();
      }


snippet statefulW
alias sfW
    class ${1:name} extends StatefulWidget {
      const ${1:name}({Key? key}) : super(key: key);
      @override
      State<${1:index}> createState() => _${1:WidgetName}State();
    }
    class _${1:index}State extends State<${1:index}> {
      @override
      Widget build(BuildContext context) {
        return Container();
      }
    }


snippet build
alias b
    @override
    Widget build(BuildContext context) {
      return ${0:};
    }


snippet customPainter
alias cpa
    class ${0:name}Painter extends CustomPainter {
    
      @override
      void paint(Canvas canvas, Size size) {
      }
    
      @override
      bool shouldRepaint(${0:name}Painter oldDelegate) => false;
    
      @override
      bool shouldRebuildSemantics(${0:name}Painter oldDelegate) => false;
    }


snippet customClipper
alias ccl
    class ${0:name}Clipper extends CustomClipper<Path> {
    
      @override
      Path getClip(Size size) {
      }
    
      @override
      bool shouldReclip(CustomClipper<Path> oldClipper) => false;
    }


snippet initS
alias ini
    @override
    void initState() {
      super.initState();
      ${0:}
    }


snippet dis
alias d
    @override
    void dispose() {
      ${0:}
      super.dispose();
    }


snippet reassemble
alias rea
    @override
    void reassemble(){
      super.reassemble();
      ${0:}
    }


snippet didChangeD
alias didC
    @override
    void didChangeDependencies() {
      super.didChangeDependencies();
      ${0:}
    }


snippet didUpdateW
alias didU
    @override
    void didUpdateWidget (${1:Type}, ${2:oldWidget}) {
      super.didUpdateWidget(${2:oldWidget});
      ${0:}
    }


snippet listViewB
alias stw
    ListView.builder(
      itemCount: ${1:1},
      itemBuilder: (BuildContext context, int index) {
        return ${2:};
      },
    )


snippet listViewS
alias lvS
    ListView.separated(
      itemCount: ${1:1},
      separatorBuilder: (BuildContext context, int index) {
        return ${2:};
      },
      itemBuilder: (BuildContext context, int index) {
        return ${3:};
      },
    )


snippet gridViewB
alias gvB
    GridView.builder(
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: ${1:2},
      ),
      itemCount: ${2:2},
      itemBuilder: (BuildContext context, int index) {
        return ${3:};
      },
    ),


snippet gridViewC
alias gvC
    GridView.count(
      crossAxisSpacing: ${1:1},
      mainAxisSpacing: ${2:2},
      crossAxisCount: ${3:2},
      children: <Widget> [
        ${4:}
      ],
    ),


snippet gridViewE
alias gvE
    GridView.extent(
      maxCrossAxisExtent:  ${1:2}
      children: <Widget> [
        ${2:}
      ],
    ),


snippet customScrollV
alias csV
    CustomScrollView(
      slivers: <Widget>[
        ${0:}
      ],
    ),


snippet streamBldr
alias sB
    StreamBuilder(
      stream: ${1:stream}
      initialData: ${2:initialData}
      builder: (BuildContext context, AsyncSnapshot snapshot) {
        return Container(
          child: ${3:child}
        );
      }
    ),


snippet animatedBldr
alias aB
    AnimatedBuilder(
      animation: ${1:animation}
      child: ${2:child}
      builder: (BuildContext context, Widget? child) {
        return ${3:};
      }
    ),


snippet statefulBldr
alias sfB
    StatefulBuilder(
      builder: (BuildContext context, setState) {
        return ${0:};
      }
    ),


snippet orientationBldr
alias oB
    OrientationBuilder(
      builder: (BuildContext context, Orientation orientation) {
        return Container(
          child: ${3:child}
        );
      }
    ),


snippet layoutBldr
alias lB
    LayoutBuilder(
      builder: (BuildContext context, BoxConstraints constraints) {
        return ${0:};
      }
    ),


snippet singleChildSV
alias scsV
    SingleChildScrollView(
      controller: ${1:controller}
      child: Column(
        ${0:}
      ),
    ),


snippet futureBldr
alias fB
    FutureBuilder(
      future: ${1:Future},
      initialData: ${2:InitialData},
      builder: (BuildContext context, AsyncSnapshot snapshot) {
        return ${3:};
      },
    ),


snippet nosm
alias nsm
    @override
    dynamic noSuchMethod(Invocation invocation) {
      ${1:}
    }


snippet inheritedW
alias iW
    class ${1:Name} extends InheritedWidget {
      const ${1:Name}({Key? key, required this.child}) : super(key: key, child: child);
    
      final Widget child;
    
      static ${1:Name}? of(BuildContext context) {
        return context.dependOnInheritedWidgetOfExactType<${1:Name}>();
      }
    
      @override
      bool updateShouldNotify(${1:Name} oldWidget) {
        return ${2:true};
      }
    }


snippet mounted
alias m
    @override
    bool get mounted {
      ${0:}
    }


snippet sink
alias si
    Sink<${1:type}> get ${2:name} => _${2:name}Controller.sink;
    final _${2:name}Controller = StreamController<${1:type}>();


snippet strm
alias st
    Stream<${1:type}> get ${2:name} => _${2:name}Controller.stream;
    final _${2:name}Controller = StreamController<${1:type}>();


snippet subj
alias sts
    Stream<${1:type}> get ${2:name} => _${2:name}Subject.stream;
    final _${2:name}Subject = BehaviorSubject<${1:type}>();


snippet toStr
alias tos
    @override
    String toString() {
      return ${1:toString};
    }


snippet debugP
alias dP
    debugPrint(${1:statement});


snippet importM
alias iM
    import 'package:flutter/material.dart';


snippet importC
alias iC
    import 'package:flutter/cupertino.dart';


snippet importFT
alias iFT
    import 'package:flutter_test/flutter_test.dart';


snippet mateapp
alias mate
    import 'package:flutter/material.dart';
    
    void main() => runApp(const MyApp());
    
    class MyApp extends StatelessWidget {
      const MyApp({Key? key}) : super(key: key);
    
      @override
      Widget build(BuildContext context) {
        return MaterialApp(
          title: 'Material App'
          home: Scaffold(
            appBar: AppBar(
              title: const Text('Material App Bar')
            )
            alias stw
              child:  Text('Hello World')
            )
          )
        );
      }
    }


snippet cupeapp
alias cupe
    import 'package:flutter/cupertino.dart';
    
    void main() => runApp(const MyApp());
    
    class MyApp extends StatelessWidget {
      const MyApp({Key? key}) : super(key: key);
    
      @override
      Widget build(BuildContext context) {
        return const CupertinoApp(
          title: 'Cupertino App'
          home: CupertinoPageScaffold(
            navigationBar: CupertinoNavigationBar(
              middle: Text('Cupertino App Bar')
            )
            child: Center(
              child: Text('Hello World')
            )
          )
        );
      }
    }


snippet tweenAnimationBuilder
alias twnAB
    TweenAnimationBuilder(
      duration: ${1:const Duration()},
      tween: ${2:Tween()},
      builder: (BuildContext context, ${3:dynamic} value, Widget? child) {
        return ${4:Container();}
      }
    ),


snippet valueListenableBuilder
alias vLB
    ValueListenableBuilder(
      valueListenable: ${1: null},
      builder: (BuildContext context, ${2:dynamic} value, Widget? child) {
        return ${3: Container();}
      }
    ),

# riverpod snips
snippet changeNotifier
    class $1Notifier extends ChangeNotifier {
      $2
    }

snippet changeNotifierProvider
  final $1Provider = ChangeNotifierProvider<$2>((ref) {
    return $3;
  });

snippet changeNotifierProviderFamily
  final $1Provider = ChangeNotifierProvider.family<$2, $3>((ref, $4) {
    return $5;
  });

snippet consumer
  Consumer(
    builder: (context, ref, child) {
      return $1;
    }
  )

snippet stlessConsumer
alias slCW
  class $1 extends ConsumerWidget {
    const $1({Key? key}) : super(key: key);
    @override
    Widget build(BuildContext context, WidgetRef ref) {
      return Container();
    }
  }

snippet stfulConsumer
alias sfCW
  class $1 extends ConsumerStatefulWidget {
    const $1({Key? key}) : super(key: key);
    @override
    ConsumerState<ConsumerStatefulWidget> createState() => _$1State();
  }
  class _$1State extends ConsumerState<$1> {
    @override
    Widget build(BuildContext context) {
      return Container();
    }
  }

snippet stlessHookConsumer
alias slHCW
  class $1 extends HookConsumerWidget {
    @override
    Widget build(BuildContext context, WidgetRef ref) {
      return Container();
    }
  }

snippet stfulHookConsumer
alias sfHCW
  class $1 extends StatefulHookConsumerWidget {
    const $1({Key? key}) : super(key: key);
      @override
      ConsumerState<ConsumerStatefulWidget> createState() => _$1State();
  }
  class _$1State extends ConsumerState<$1> {
    @override
    Widget build(BuildContext context) {
      return Container();
    }
  }

snippet futureProvider
  final $1Provider = FutureProvider<$2>((ref) async {
    return $3;
  });

snippet futureProviderFamily
  final $1Provider = FutureProvider.family<$2, $3>((ref, $4) async {
    return $5;
  });

snippet provider
  final $1Provider = Provider<$2>((ref) {
    return $3;
  });

snippet providerFamily
  final $1Provider = Provider.family<$2, $3>((ref, $4) {
    return $5;
  });

snippet listen
  ref.listen<$1>($2, (value) {
    $3
  });

snippet stateNotifier
  class $1Notifier extends StateNotifier<$2> {
    $1Notifier(): super($3);
    $4
  }

snippet stateNotifierProvider
  final $1Provider = StateNotifierProvider<$2>((ref) {
    return $3
  });

snippet stateNotifierProviderFamily
  final $1Provider = StateNotifierProvider.family<$2, $3>((ref, $4) {
    return $5
  });

snippet stateProvider
  final $1Provider = StateProvider<$2>((ref) {
    return $3;
  });

snippet stateProviderFamily
  final $1Provider = StateProvider.family<$2, $3>((ref, $4) {
    return $5;
  });

snippet streamProvider
  final $1Provider = StreamProvider<$2>((ref) async* {
    return $3;
  });

snippet streamProviderFamily
  final $1Provider = StreamProvider.family<$2, $3>((ref, $4) async* {
    return $5;
  });
  
